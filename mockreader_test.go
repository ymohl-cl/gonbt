// Code generated by MockGen. DO NOT EDIT.
// Source: reader.go

// Package gonbt is a generated GoMock package.
package gonbt

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Byte mocks base method.
func (m *MockReader) Byte() (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Byte")
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Byte indicates an expected call of Byte.
func (mr *MockReaderMockRecorder) Byte() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Byte", reflect.TypeOf((*MockReader)(nil).Byte))
}

// Bytes mocks base method.
func (m *MockReader) Bytes() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bytes indicates an expected call of Bytes.
func (mr *MockReaderMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockReader)(nil).Bytes))
}

// Double mocks base method.
func (m *MockReader) Double() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Double")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Double indicates an expected call of Double.
func (mr *MockReaderMockRecorder) Double() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Double", reflect.TypeOf((*MockReader)(nil).Double))
}

// Float mocks base method.
func (m *MockReader) Float() (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float")
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Float indicates an expected call of Float.
func (mr *MockReaderMockRecorder) Float() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float", reflect.TypeOf((*MockReader)(nil).Float))
}

// Int mocks base method.
func (m *MockReader) Int() (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int")
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Int indicates an expected call of Int.
func (mr *MockReaderMockRecorder) Int() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockReader)(nil).Int))
}

// IntArray mocks base method.
func (m *MockReader) IntArray() ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntArray")
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntArray indicates an expected call of IntArray.
func (mr *MockReaderMockRecorder) IntArray() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntArray", reflect.TypeOf((*MockReader)(nil).IntArray))
}

// Long mocks base method.
func (m *MockReader) Long() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Long")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Long indicates an expected call of Long.
func (mr *MockReaderMockRecorder) Long() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Long", reflect.TypeOf((*MockReader)(nil).Long))
}

// LongArray mocks base method.
func (m *MockReader) LongArray() ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LongArray")
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LongArray indicates an expected call of LongArray.
func (mr *MockReaderMockRecorder) LongArray() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LongArray", reflect.TypeOf((*MockReader)(nil).LongArray))
}

// Short mocks base method.
func (m *MockReader) Short() (int16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Short")
	ret0, _ := ret[0].(int16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Short indicates an expected call of Short.
func (mr *MockReaderMockRecorder) Short() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Short", reflect.TypeOf((*MockReader)(nil).Short))
}

// String mocks base method.
func (m *MockReader) String() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// String indicates an expected call of String.
func (mr *MockReaderMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockReader)(nil).String))
}
