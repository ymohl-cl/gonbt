// Code generated by MockGen. DO NOT EDIT.
// Source: writer.go

// Package gonbt is a generated GoMock package.
package gonbt

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Byte mocks base method.
func (m *MockWriter) Byte(arg0 byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Byte", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Byte indicates an expected call of Byte.
func (mr *MockWriterMockRecorder) Byte(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Byte", reflect.TypeOf((*MockWriter)(nil).Byte), arg0)
}

// Bytes mocks base method.
func (m *MockWriter) Bytes(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockWriterMockRecorder) Bytes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockWriter)(nil).Bytes), arg0)
}

// Double mocks base method.
func (m *MockWriter) Double(arg0 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Double", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Double indicates an expected call of Double.
func (mr *MockWriterMockRecorder) Double(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Double", reflect.TypeOf((*MockWriter)(nil).Double), arg0)
}

// Float mocks base method.
func (m *MockWriter) Float(arg0 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Float indicates an expected call of Float.
func (mr *MockWriterMockRecorder) Float(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float", reflect.TypeOf((*MockWriter)(nil).Float), arg0)
}

// Int mocks base method.
func (m *MockWriter) Int(arg0 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Int indicates an expected call of Int.
func (mr *MockWriterMockRecorder) Int(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockWriter)(nil).Int), arg0)
}

// IntArray mocks base method.
func (m *MockWriter) IntArray(arg0 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntArray", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IntArray indicates an expected call of IntArray.
func (mr *MockWriterMockRecorder) IntArray(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntArray", reflect.TypeOf((*MockWriter)(nil).IntArray), arg0)
}

// Long mocks base method.
func (m *MockWriter) Long(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Long", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Long indicates an expected call of Long.
func (mr *MockWriterMockRecorder) Long(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Long", reflect.TypeOf((*MockWriter)(nil).Long), arg0)
}

// LongArray mocks base method.
func (m *MockWriter) LongArray(arg0 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LongArray", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LongArray indicates an expected call of LongArray.
func (mr *MockWriterMockRecorder) LongArray(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LongArray", reflect.TypeOf((*MockWriter)(nil).LongArray), arg0)
}

// Short mocks base method.
func (m *MockWriter) Short(arg0 int16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Short", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Short indicates an expected call of Short.
func (mr *MockWriterMockRecorder) Short(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Short", reflect.TypeOf((*MockWriter)(nil).Short), arg0)
}

// String mocks base method.
func (m *MockWriter) String(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockWriterMockRecorder) String(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockWriter)(nil).String), arg0)
}
